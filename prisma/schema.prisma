generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  salt      String?
  role      String    @default("user")
  createdAt DateTime  @default(now())
  sessions  Session[]
  photos    Photo[]   @relation("UserPhotos") // ðŸ‘ˆ Opposite field of Photo.uploader
  likes     Like[] // ðŸ‘ˆ Opposite field of Like.user
}

model Photo {
  id         String   @id @default(cuid())
  url        String
  createdAt  DateTime @default(now())
  uploaderId String
  uploader   User     @relation("UserPhotos", fields: [uploaderId], references: [id]) // ðŸ‘ˆ Requires opposite field
  likes      Like[] // ðŸ‘ˆ Opposite field of Like.photo

  // Auto-rÃ©fÃ©rence pour lier des photos entre elles
  linkedPhotos Photo[] @relation("PhotoLinks")
  linkedTo     Photo[] @relation("PhotoLinks")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  photoId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id]) // ðŸ‘ˆ Requires opposite field in User
  photo Photo @relation(fields: [photoId], references: [id]) // ðŸ‘ˆ Requires opposite field in Photo

  @@unique([userId, photoId]) // ðŸ‘ˆ Un utilisateur ne peut liker une photo qu'une fois
}

model Session {
  id        String   @id
  userId    String
  role      String
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}
